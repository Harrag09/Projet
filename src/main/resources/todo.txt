04/05/2022:
- Create a class named SignUpRequest that will be used to register a new user. This class will have the following fields:
    - email
    - password
    - firstName
    - lastName
    - address

- Create a class named SignInRequest that will be used to login a user. This class will have the following fields:
    - email
    - password

- Create a controller named AuthController that will have the following endpoints:
    - POST /auth/signup: this endpoint will be used to register a new user. It will receive a SignUpRequest as a request body
        It should create a new use in the database.
        It returns 200 status code if the user was created successfully.
        No response body is required.
    - POST /auth/login: this endpoint will be used to login a user. It will receive an email and a password as a request body
        It should return the user's information.

- Think about users types/roles. How can you implement them?
take a look at https://fr.wikipedia.org/wiki/Liste_des_codes_HTTP

05/04/2021:
Learn the difference between @NotBlank and @NotEmpty and @NotNull -
take a look at https://www.baeldung.com/java-bean-validation-not-null-empty-blank

Take a look at mappers such as model mapper and it's alternatives
Learn how to use mapstruct and how to use it with spring boot
Create UserMapper and use it in the controller or service layer for example - mapToUserEntity from SingUpRequest
take a look at this article https://www.baeldung.com/java-performance-mapping-frameworks

Take a lok at password encryption and how to use it in spring boot and use it to encrypt the password before saving it in the database

add enum for roles and use it as column in user table named role use annotations @Enumerated(EnumType.STRING) and @Column(name = "role", nullable = false)